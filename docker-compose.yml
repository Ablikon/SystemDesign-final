version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  # Frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    hostname: client
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
    networks:
      - app-network

  # API Gateway
  api-gateway:
    build:
      context: ./server/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    hostname: api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./server/api-gateway:/app
      - /app/node_modules
    depends_on:
      - identity-service
      - equipment-service
      - reservation-service
      - notification-service
    environment:
      - NODE_ENV=development
      - PORT=8080
      - IDENTITY_SERVICE_URL=http://identity-service:3001
      - EQUIPMENT_SERVICE_URL=http://equipment-service:3002
      - RESERVATION_SERVICE_URL=http://reservation-service:3003
      - NOTIFICATION_SERVICE_URL=http://notification-service:3004
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  # Identity Service
  identity-service:
    build:
      context: ./server/identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    hostname: identity-service
    ports:
      - "3001:3001"
    volumes:
      - ./server/identity-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/identity_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  # Equipment Service
  equipment-service:
    build:
      context: ./server/equipment-service
      dockerfile: Dockerfile
    container_name: equipment-service
    hostname: equipment-service
    ports:
      - "3002:3002"
    volumes:
      - ./server/equipment-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - kafka
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/equipment_db
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  # Reservation Service
  reservation-service:
    build:
      context: ./server/reservation-service
      dockerfile: Dockerfile
    container_name: reservation-service
    hostname: reservation-service
    ports:
      - "3003:3003"
    volumes:
      - ./server/reservation-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - kafka
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/reservation_db
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  # Notification Service
  notification-service:
    build:
      context: ./server/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    hostname: notification-service
    ports:
      - "3004:3004"
    volumes:
      - ./server/notification-service:/app
      - /app/node_modules
    depends_on:
      - kafka
      - redis
    environment:
      - NODE_ENV=development
      - PORT=3004
      - KAFKA_BROKER=kafka:9092
      - REDIS_URL=redis://redis:6379
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    hostname: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=identity_db,equipment_db,reservation_db
    networks:
      - app-network

  # Redis for caching and session management
  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=open-science-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  kafka_data: 